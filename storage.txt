# from flask import Flask,redirect,url_for,render_template, request, flash 
# import re
# from flask import Flask, render_template, request, redirect, url_for, flash, session
# from werkzeug.security import generate_password_hash, check_password_hash
# import sqlite3
# # from database_setup import init_db


# app = Flask(__name__)
# app.secret_key = 'mysecrethifi'
# # Initialize the database
# def init_db():
#     conn = sqlite3.connect("database.db")
#     cursor = conn.cursor()
#     cursor.execute("""
#         CREATE TABLE IF NOT EXISTS users (
#             id INTEGER PRIMARY KEY AUTOINCREMENT,
#             name TEXT,
#             username TEXT NOT NULL UNIQUE,
#             email TEXT NOT NULL UNIQUE,
#             password TEXT NOT NULL,
#             role TEXT NOT NULL,
#             location TEXT,
#             contact TEXT
#         )
#     """)
#     # Contact messages table
#     cursor.execute('''
#         CREATE TABLE IF NOT EXISTS contact_messages (
#             id INTEGER PRIMARY KEY AUTOINCREMENT,
#             name TEXT NOT NULL,
#             email TEXT NOT NULL,
#             message TEXT NOT NULL
#         )
#     ''')
#     conn.commit()
#     conn.close()


# init_db()

# @app.route('/',methods=['GET', 'POST'])
# def login():
#     if request.method == 'POST':
#         username = request.form['username']
#         password = request.form['password']

#         with get_db_connection() as conn:
#             cursor = conn.cursor()
#             cursor.execute("""
#                 SELECT * FROM users WHERE username = ? AND password = ?
#             """, (username, password))
#             user = cursor.fetchone()

#             if user:
#                 if username == "admin" and password == "123456":
#                     flash('Login successful! Welcome back, Admin.', 'success')
#                     return redirect(url_for('admin'))  # Redirect to admin dashboard
#                 else:
#                     role = user['role']  # Get the user's role
#                     if role == 'Customer':
#                         flash('Login successful! Welcome back, Customer.', 'success')
#                         return redirect(url_for('start'))  # Redirect to customer dashboard
#                     elif role == 'Agent':
#                         flash('Login successful! Welcome back, Agent.', 'success')
#                         return redirect(url_for('delivery'))  # Redirect to agent dashboard
#                 # elif role == 'Admin':
#                 #     flash('Login successful! Welcome back, Admin.', 'success')
#                 #     return redirect(url_for('admin'))  # Redirect to admin dashboard
#             else:
#                 flash('Invalid username or password. Please try again.', 'danger')

#     return render_template('login.html')

# @app.route('/home')
# def start():
#     return render_template("homepage.html")

# @app.route('/admin')
# def admin():
#     return render_template('admin.html')

# @app.route('/delivery')
# def delivery():
#     return render_template('deliveryagent.html')

# @app.route('/user-profile')
# def profile():
#     return render_template("profile.html")

# @app.route('/passrecover')
# def recover():
#     return render_template("recovery.html")

# @app.route('/info')
# def info():
#     return render_template("info.html")

# # @app.route('/contact')
# # Contact Route (example)
# @app.route('/contact', methods=['GET', 'POST'])
# def contact():
#     if request.method == 'POST':
#         name = request.form['name']
#         email = request.form['email']
#         message = request.form['message']

#         # Save the contact message to the database
#         conn = sqlite3.connect('database.db')
#         cursor = conn.cursor()
#         cursor.execute('''
#             INSERT INTO contact_messages (name, email, message)
#             VALUES (?, ?, ?)
#         ''', (name, email, message))
#         conn.commit()
#         conn.close()

#         flash("Message sent successfully!", "success")
#         return redirect(url_for('contact'))

#     return render_template('contact.html')

# @app.route('/profile', methods=['GET', 'POST'])
# def profile_update():
#     if 'user_id' not in session:
#         flash('You must be logged in to view your profile', 'danger')
#         return redirect(url_for('login'))  # Redirect to login page if not logged in

#     user_id = session['user_id']  # Assuming you store user ID in session after login

#     if request.method == 'GET':
#         # Fetch user details from the database
#         with get_db_connection() as conn:
#             cursor = conn.cursor()
#             cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
#             user = cursor.fetchone()

#         if user:
#             # Pass user data to the template
#             return render_template('profile.html', user=user)
#         else:
#             flash('User not found', 'danger')
#             return redirect(url_for('login'))

#     if request.method == 'POST':
#         # Get the updated details from the form
#         name = request.form['name']
#         email = request.form['email']
#         phone = request.form['phone']
#         location = request.form['location']

#         # Update the user details in the database
#         with get_db_connection() as conn:
#             cursor = conn.cursor()
#             cursor.execute("""
#                 UPDATE users
#                 SET name = ?, email = ?, phone = ?, location = ?
#                 WHERE id = ?
#             """, (name, email, phone, location, user_id))
#             conn.commit()

#         flash('Profile updated successfully!', 'success')
#         return redirect(url_for('profile'))  # Redirect to the profile page

# def get_db_connection():
#     conn = sqlite3.connect('database.db', timeout=10)  # Timeout to avoid lock
#     conn.row_factory = sqlite3.Row
#     return conn

# @app.route('/register', methods=['GET', 'POST'])
# def register():
#     if request.method == 'POST':
#         username = request.form['username']
#         password = request.form['password']
#         email = request.form['email']
#         role = request.form['role']
#         location = request.form['location']
#         contact = request.form['contact']

#         try:
#             with get_db_connection() as conn:
#                 cursor = conn.cursor()
#                 cursor.execute("""
#                     INSERT INTO users (username, password, email, role, location, contact)
#                     VALUES (?, ?, ?, ?, ?, ?)
#                 """, (username, password, email, role, location, contact))
#                 conn.commit()

#             flash('Registration successful! Please log in.', 'success')
#             return redirect(url_for('login'))
#         except sqlite3.OperationalError:
#             flash('Database is currently locked. Please try again later.', 'danger')
#             return redirect(url_for('register'))

#     return render_template('register.html')

# # @app.route("/login", methods=["GET", "POST"])
# # def login():
# #     if request.method == "POST":
# #         username = request.form.get("username")
# #         password = request.form.get("password")

# #         conn = sqlite3.connect("database.db")
# #         cursor = conn.cursor()
# #         cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, password))
# #         user = cursor.fetchone()
# #         conn.close()

# #         if user:
# #             session["user_id"] = user[0]
# #             session["username"] = user[1]
# #             flash("Login successful!", "success")
# #             return redirect(url_for("start"))
# #         else:
# #             flash("Invalid username or password.", "danger")

# #     return render_template("login.html")

# # @app.route('/login', methods=['GET', 'POST'])
# # def login():
# #     if request.method == 'POST':
# #         username = request.form['username']
# #         password = request.form['password']

# #         with get_db_connection() as conn:
# #             cursor = conn.cursor()
# #             cursor.execute("""
# #                 SELECT * FROM users WHERE username = ? AND password = ?
# #             """, (username, password))
# #             user = cursor.fetchone()

# #             if user:
# #                 role = user['role']  # Get the user's role
# #                 if role == 'Customer':
# #                     flash('Login successful! Welcome back, Customer.', 'success')
# #                     return redirect(url_for('start'))  # Redirect to customer dashboard
# #                 elif role == 'Agent':
# #                     flash('Login successful! Welcome back, Agent.', 'success')
# #                     return redirect(url_for('delivery'))  # Redirect to agent dashboard
# #                 elif role == 'Admin':
# #                     flash('Login successful! Welcome back, Admin.', 'success')
# #                     return redirect(url_for('admin'))  # Redirect to admin dashboard
# #             else:
# #                 flash('Invalid username or password. Please try again.', 'danger')

# #     return render_template('login.html')

# @app.route('/submit_contact',methods=['GET','POST'])
# def submit_contact():
#     if request.method == 'POST':
#         name = request.form['name']
#         email = request.form['email']
#         message = request.form['message']
#         if not re.match(r'^[\w\.-]+@[\w\.-]+\.\w+$', email):
#             flash("Invalid email format.", "error")
#             return redirect(url_for('register'))
#         print(name,email,message,sep='\n')
#     return redirect(url_for('start'))

# if __name__ == '__main__':
#     # init_db()
#     app.run(debug=True)

# from flask import Flask,redirect,url_for,render_template, request, flash 